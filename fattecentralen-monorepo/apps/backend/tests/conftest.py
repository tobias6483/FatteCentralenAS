"""
Pytest configuration file for Flask backend testing.
This file contains shared fixtures for all tests.
"""

import os
import tempfile

import pytest
from fastapi.testclient import TestClient  # Keep for now
from werkzeug.security import generate_password_hash

# Corrected imports based on project structure
from .. import create_app  # from backend/__init__.py
from ..config import Config  # Import Config from backend/config.py
from ..extensions import db as _db  # from backend/extensions.py
from ..models import ForumCategory, ForumPost, ForumThread, PasswordResetRequest, User


@pytest.fixture(scope="session")
def app_fixture():
    """Create and configure a Flask app for testing."""
    db_fd, db_path = tempfile.mkstemp()

    class TestConfig(Config):
        TESTING = True
        SQLALCHEMY_DATABASE_URI = f"sqlite:///{db_path}"
        SQLALCHEMY_TRACK_MODIFICATIONS = False
        SECRET_KEY = "test_secret_key"
        JWT_SECRET_KEY = "test_jwt_secret_key"
        WTF_CSRF_ENABLED = False
        # Ensure other necessary overrides from base Config are present or defaulted safely
        # For example, if base Config relies on os.environ for paths not relevant for tests,
        # ensure TestConfig provides static or test-specific values.
        # Minimal example shown here.

    created_app = create_app(config_class=TestConfig)

    with created_app.app_context():
        _db.create_all()
        yield created_app

    with created_app.app_context():
        _db.drop_all()
    os.close(db_fd)
    os.unlink(db_path)


@pytest.fixture(scope="session")
def db(app_fixture):
    return _db


@pytest.fixture(scope="function")
def session(db, app_fixture):
    with app_fixture.app_context():
        connection = db.engine.connect()
        transaction = connection.begin()
        sess = db.create_scoped_session(options={"bind": connection, "binds": {}})
        db.session = sess
        yield sess
        sess.remove()
        transaction.rollback()
        connection.close()


@pytest.fixture
def client(app_fixture):
    return app_fixture.test_client()


@pytest.fixture
def auth_headers():
    return {"Authorization": "Bearer test_token", "Content-Type": "application/json"}


@pytest.fixture
def create_test_user(session):
    def _create_user(
        username="testuser",
        email="test@example.com",
        password="Password123",
        firebase_uid=None,
        role="user",
        **kwargs,
    ):
        user_data = {
            "username": username,
            "email": email,
            "firebase_uid": firebase_uid or f"firebase_{username}",
            "role": role,
            **kwargs,
        }
        user = User(**user_data)
        if password:
            user.password_hash = generate_password_hash(password)
        session.add(user)
        session.commit()
        return user

    return _create_user


@pytest.fixture
def create_forum_category(session):
    def _create_category(
        name="Test Category",
        description="Test Description",
        icon=None,
        sort_order=0,
        **kwargs,
    ):
        # ForumCategory __init__ takes name, description, icon, sort_order.
        # Slug is generated by generate_slug method called in __init__.
        category = ForumCategory(
            name=name,
            description=description,
            icon=icon,  # Pass icon or let default in model handle it
            sort_order=sort_order,  # Pass sort_order or let default handle it
            **kwargs,  # Pass any other kwargs if model supports them
        )
        session.add(category)
        session.commit()
        return category

    return _create_category


@pytest.fixture
def create_forum_thread(session, create_test_user, create_forum_category):
    def _create_thread(
        title="Test Thread",
        user=None,
        category=None,
        is_sticky=False,
        is_locked=False,
        author_username=None,
        **kwargs,
    ):
        actual_author_username = None
        if user:
            actual_author_username = user.username
        elif author_username:
            actual_author_username = author_username
        else:  # Default case: create a new user
            user = create_test_user()
            actual_author_username = user.username

        if category is None:
            category = create_forum_category()

        # Pass all relevant fields as keyword arguments directly to the constructor
        thread_data = {
            "title": title,
            "author_username": actual_author_username,
            "category_id": category.id,
            "is_sticky": is_sticky,
            "is_locked": is_locked,
            **kwargs,  # Include any additional kwargs passed to the fixture
        }
        thread = ForumThread(**thread_data)
        session.add(thread)
        session.commit()
        return thread

    return _create_thread


@pytest.fixture
def create_forum_post(session, create_test_user, create_forum_thread):
    def _create_post(
        body="Test post content", user=None, thread=None, author_username=None, **kwargs
    ):
        actual_author_username = None
        if user:
            actual_author_username = user.username
        elif author_username:
            actual_author_username = author_username
        else:  # Default case: create a new user for the post
            user = create_test_user()
            actual_author_username = user.username

        if thread is None:
            thread = create_forum_thread(author_username=actual_author_username)

        # Pass all relevant fields as keyword arguments directly to the constructor
        post_data = {
            "body": body,
            "author_username": actual_author_username,
            "thread_id": thread.id,
            **kwargs,  # Include any additional kwargs passed to the fixture
        }
        post = ForumPost(**post_data)
        session.add(post)
        session.commit()
        return post

    return _create_post


@pytest.fixture
def create_password_reset_request(session, create_test_user):
    def _create_request(user=None, token="test_reset_token", expires_in_hours=24):
        if user is None:
            user = create_test_user()
        req = PasswordResetRequest(
            user_id=user.id, token=token, expires_in_hours=expires_in_hours
        )
        session.add(req)
        session.commit()
        return req

    return _create_request
