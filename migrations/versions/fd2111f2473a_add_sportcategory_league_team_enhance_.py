"""add_sportcategory_league_team_enhance_sportevent

Revision ID: fd2111f2473a
Revises: 1a799ad55272
Create Date: 2025-05-18 01:50:53.131932

"""

import sqlalchemy as sa
from alembic import op
from sqlalchemy import inspect

# revision identifiers, used by Alembic.
revision = "fd2111f2473a"
down_revision = "1a799ad55272"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    bind = op.get_bind()
    inspector = inspect(bind)

    if not inspector.has_table("sport_category"):
        op.create_table(
            "sport_category",
            sa.Column("id", sa.Integer(), nullable=False),
            sa.Column("name", sa.String(length=100), nullable=False),
            sa.Column("slug", sa.String(length=120), nullable=False),
            sa.Column("description", sa.Text(), nullable=True),
            sa.Column("icon", sa.String(length=100), nullable=True),
            sa.PrimaryKeyConstraint("id"),
        )
        with op.batch_alter_table("sport_category", schema=None) as batch_op:
            batch_op.create_index(
                batch_op.f("ix_sport_category_name"), ["name"], unique=True
            )
            batch_op.create_index(
                batch_op.f("ix_sport_category_slug"), ["slug"], unique=True
            )

    if not inspector.has_table("team"):
        op.create_table(
            "team",
            sa.Column("id", sa.Integer(), nullable=False),
            sa.Column("name", sa.String(length=150), nullable=False),
            sa.Column("short_name", sa.String(length=50), nullable=True),
            sa.Column("slug", sa.String(length=170), nullable=False),
            sa.Column("logo_url", sa.String(length=512), nullable=True),
            sa.Column("country", sa.String(length=100), nullable=True),
            sa.PrimaryKeyConstraint("id"),
        )
        with op.batch_alter_table("team", schema=None) as batch_op:
            batch_op.create_index(batch_op.f("ix_team_name"), ["name"], unique=True)
            batch_op.create_index(batch_op.f("ix_team_slug"), ["slug"], unique=True)

    if not inspector.has_table("league"):
        op.create_table(
            "league",
            sa.Column("id", sa.Integer(), nullable=False),
            sa.Column("name", sa.String(length=150), nullable=False),
            sa.Column("slug", sa.String(length=170), nullable=False),
            sa.Column("logo_url", sa.String(length=512), nullable=True),
            sa.Column("country", sa.String(length=100), nullable=True),
            sa.Column("sport_category_id", sa.Integer(), nullable=False),
            sa.Column("active", sa.Boolean(), nullable=False),
            sa.Column("last_api_check", sa.DateTime(timezone=True), nullable=True),
            sa.ForeignKeyConstraint(
                ["sport_category_id"],
                ["sport_category.id"],
            ),
            sa.PrimaryKeyConstraint("id"),
        )
        with op.batch_alter_table("league", schema=None) as batch_op:
            batch_op.create_index(batch_op.f("ix_league_name"), ["name"], unique=False)
            batch_op.create_index(batch_op.f("ix_league_slug"), ["slug"], unique=True)
            batch_op.create_index(
                batch_op.f("ix_league_sport_category_id"),
                ["sport_category_id"],
                unique=False,
            )

    # Ensure 'sport' table exists for reflection, even if minimal, before altering 'sport_event'
    # This is because 'sport_event' might have a FK to 'sport' that batch_alter_table will try to reflect.
    if not inspector.has_table("sport"):
        op.create_table(
            "sport",
            sa.Column("key", sa.String(length=100), nullable=False),
            sa.PrimaryKeyConstraint("key"),
        )

    with op.batch_alter_table("sport_event", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column("league_id", sa.Integer(), nullable=False, server_default="0")
        )  # Add server_default temporarily
        batch_op.add_column(sa.Column("home_team_id", sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column("away_team_id", sa.Integer(), nullable=True))
        batch_op.add_column(
            sa.Column("home_team_name_raw", sa.String(length=150), nullable=True)
        )
        batch_op.add_column(
            sa.Column("away_team_name_raw", sa.String(length=150), nullable=True)
        )
        batch_op.add_column(sa.Column("status", sa.String(length=50), nullable=True))
        batch_op.add_column(sa.Column("minute", sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column("period", sa.String(length=50), nullable=True))
        batch_op.add_column(sa.Column("home_score", sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column("away_score", sa.Integer(), nullable=True))
        batch_op.add_column(
            sa.Column("home_score_period1", sa.Integer(), nullable=True)
        )
        batch_op.add_column(
            sa.Column("away_score_period1", sa.Integer(), nullable=True)
        )
        batch_op.add_column(
            sa.Column("home_score_period2", sa.Integer(), nullable=True)
        )
        batch_op.add_column(
            sa.Column("away_score_period2", sa.Integer(), nullable=True)
        )
        batch_op.add_column(
            sa.Column("home_score_overtime", sa.Integer(), nullable=True)
        )
        batch_op.add_column(
            sa.Column("away_score_overtime", sa.Integer(), nullable=True)
        )
        batch_op.add_column(
            sa.Column("home_score_penalties", sa.Integer(), nullable=True)
        )
        batch_op.add_column(
            sa.Column("away_score_penalties", sa.Integer(), nullable=True)
        )
        batch_op.add_column(sa.Column("venue_info", sa.JSON(), nullable=True))
        batch_op.add_column(sa.Column("statistics", sa.JSON(), nullable=True))
        batch_op.add_column(sa.Column("timeline_events", sa.JSON(), nullable=True))
        batch_op.add_column(sa.Column("lineups", sa.JSON(), nullable=True))
        batch_op.add_column(
            sa.Column("last_api_update", sa.DateTime(timezone=True), nullable=True)
        )

        # Explicitly drop the foreign key constraint to 'sport' table by its name if known,
        # or by specifying the column if the name is None and it's SQLite.
        # For SQLite, Alembic often uses None for unnamed constraints.
        # The drop_constraint(None, type_='foreignkey') should target the FK on sport_key.
        # If a constraint name was auto-generated, it would be better to use it.
        # Example: batch_op.drop_constraint('fk_sport_event_sport_key_sport', type_='foreignkey')
        # Check if the constraint exists before trying to drop it
        foreign_keys = inspector.get_foreign_keys("sport_event")
        constraint_exists = any(
            fk["name"] == "fk_sport_event_sport_key_sport" for fk in foreign_keys
        )
        if constraint_exists:
            batch_op.drop_constraint(
                "fk_sport_event_sport_key_sport", type_="foreignkey"
            )

        # Check if the index exists before trying to drop it
        indexes = inspector.get_indexes("sport_event")
        index_exists = any(idx["name"] == "ix_sport_event_sport_key" for idx in indexes)
        if index_exists:
            batch_op.drop_index("ix_sport_event_sport_key")

        batch_op.create_index(
            batch_op.f("ix_sport_event_away_team_id"), ["away_team_id"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_sport_event_home_team_id"), ["home_team_id"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_sport_event_league_id"), ["league_id"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_sport_event_status"), ["status"], unique=False
        )

        batch_op.create_foreign_key(
            batch_op.f("fk_sport_event_league_id_league"),
            "league",
            ["league_id"],
            ["id"],
        )
        batch_op.create_foreign_key(
            batch_op.f("fk_sport_event_away_team_id_team"),
            "team",
            ["away_team_id"],
            ["id"],
        )
        batch_op.create_foreign_key(
            batch_op.f("fk_sport_event_home_team_id_team"),
            "team",
            ["home_team_id"],
            ["id"],
        )

        batch_op.drop_column("away_team")
        batch_op.drop_column("home_team")
        batch_op.drop_column("sport_key")
        batch_op.drop_column("last_update_api")

    # Now it's safe to drop the 'sport' table if it exists
    if inspector.has_table("sport"):
        op.drop_table("sport")

    # Remove server_default for league_id after data copy (if any) and table recreation
    with op.batch_alter_table("sport_event", schema=None) as batch_op:
        batch_op.alter_column("league_id", server_default=None)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("sport_event", schema=None) as batch_op:
        batch_op.add_column(sa.Column("last_update_api", sa.DATETIME(), nullable=True))
        batch_op.add_column(
            sa.Column("sport_key", sa.VARCHAR(length=100), nullable=False)
        )
        batch_op.add_column(
            sa.Column("home_team", sa.VARCHAR(length=100), nullable=True)
        )
        batch_op.add_column(
            sa.Column("away_team", sa.VARCHAR(length=100), nullable=True)
        )
        batch_op.drop_constraint(
            batch_op.f("fk_sport_event_home_team_id_team"), type_="foreignkey"
        )
        batch_op.drop_constraint(
            batch_op.f("fk_sport_event_away_team_id_team"), type_="foreignkey"
        )
        batch_op.drop_constraint(
            batch_op.f("fk_sport_event_league_id_league"), type_="foreignkey"
        )
        batch_op.create_foreign_key(
            "fk_sport_event_sport_key_sport", "sport", ["sport_key"], ["key"]
        )  # Give old FK a name too for downgrade
        batch_op.drop_index(batch_op.f("ix_sport_event_status"))
        batch_op.drop_index(batch_op.f("ix_sport_event_league_id"))
        batch_op.drop_index(batch_op.f("ix_sport_event_home_team_id"))
        batch_op.drop_index(batch_op.f("ix_sport_event_away_team_id"))
        batch_op.create_index("ix_sport_event_sport_key", ["sport_key"], unique=False)
        batch_op.drop_column("last_api_update")
        batch_op.drop_column("lineups")
        batch_op.drop_column("timeline_events")
        batch_op.drop_column("statistics")
        batch_op.drop_column("venue_info")
        batch_op.drop_column("away_score_penalties")
        batch_op.drop_column("home_score_penalties")
        batch_op.drop_column("away_score_overtime")
        batch_op.drop_column("home_score_overtime")
        batch_op.drop_column("away_score_period2")
        batch_op.drop_column("home_score_period2")
        batch_op.drop_column("away_score_period1")
        batch_op.drop_column("home_score_period1")
        batch_op.drop_column("away_score")
        batch_op.drop_column("home_score")
        batch_op.drop_column("period")
        batch_op.drop_column("minute")
        batch_op.drop_column("status")
        batch_op.drop_column("away_team_name_raw")
        batch_op.drop_column("home_team_name_raw")
        batch_op.drop_column("away_team_id")
        batch_op.drop_column("home_team_id")
        batch_op.drop_column("league_id")

    op.create_table(
        "sport",
        sa.Column("key", sa.VARCHAR(length=100), nullable=False),
        sa.Column("title", sa.VARCHAR(length=100), nullable=False),
        sa.Column("group", sa.VARCHAR(length=100), nullable=False),
        sa.Column("active", sa.BOOLEAN(), nullable=False),
        sa.Column("last_checked", sa.DATETIME(), nullable=True),
        sa.PrimaryKeyConstraint("key"),
    )
    with op.batch_alter_table("league", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_league_sport_category_id"))
        batch_op.drop_index(batch_op.f("ix_league_slug"))
        batch_op.drop_index(batch_op.f("ix_league_name"))

    op.drop_table("league")
    with op.batch_alter_table("team", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_team_slug"))
        batch_op.drop_index(batch_op.f("ix_team_name"))

    op.drop_table("team")
    with op.batch_alter_table("sport_category", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_sport_category_slug"))
        batch_op.drop_index(batch_op.f("ix_sport_category_name"))

    op.drop_table("sport_category")
    # ### end Alembic commands ###
